Lightweight Markup Languages
Introductions etc. 


I’m a technical author, so this talk looks at lightweight markup languages from a personal, tech comms perspective. Not going to pretend it’s universal or definitive.


Historically, many tech authors have used specialist authoring tools to produce their documentation:


Microsoft Word (1983)
RoboHelp (1992)
Madcap Flare (2005)


However opposed to this, there has always been another group of tech authors using markup languages.


A markup language is a language that encodes the semantics and / or presentation of text along with the text itself.


I’m not going into the history of markup languages in great detail. For more information, see https://www.writethedocs.org/videos/prague/2018/a-brief-history-of-text-markup-languages-tony-ibbs/


Looking at the landscape around the year 2000, the main markup languages in the field of technical communications were probably:


LaTeX (1983) — demonstrate each in turn
DocBook (1991)
HTML (1993)
DITA (2001)


This is far from complete.


These “full” or heavyweight markup languages didn’t have human readability as their first priority. They attempted to cover most possible use cases. They are verbose (tag heavy) and to a greater or lesser extent, strict.
Lightweight Markup Languages
Came about as a response to this. Surprisingly early!


Markdown (2004) — demonstrate
AsciiDoc (2002)
reStructuredText (2002)


And so on. There are many more.


The philosophy behind these lightweight markup languages is: they’ve got to be human readable (humane). So keep the markup as minimal as possible. As a compromise, don’t attempt to cover every conceivable use case. (We’ll come back to this.)


Lightweight markup is based on conventions that had grown up in plain text email, in Usenet, in IRC, going back to bulletin boards. Asterisks for strong emphasis. Underlines for emphasis. Square brackets for links. Asterisks for bulleted lists. Indentation for quotes. And so on.
Growth
So they’ve been around for a while. But recently, lightweight markup languages have seen a growth in popularity. Are they outstripping heavy markup languages?


(Totally unscientific; just indicative of trends.)


DocBook versus Markdown


https://trends.google.com/trends/explore?date=all&q=%2Fm%2F0c1gr,%2Fm%2F0jt0gkj


DITA versus Markdown


https://trends.google.com/trends/explore?date=all&q=%2Fm%2F04jv3m,%2Fm%2F0jt0gkj


DITA versus AsciiDoc


https://trends.google.com/trends/explore?date=all&q=%2Fm%2F04jv3m,%2Fm%2F0ghs0s


Taking some users from dedicated software tools? Maybe...


MadCap Flare versus AsciiDoc


https://trends.google.com/trends/explore?date=all&q=Madcap%20Flare,AsciiDoc
Why?
I would suggest two interlinked reasons:


1. People other than technical authors are contributing to the docs.
2. The Docs Like Code methodology.
Other People Contributing to the Documentation
People other than technical authors — could be internally, e.g. engineers or subject matter experts.
See also the rise of Scrum or Agile: in a strict Scrum team there are only scrum developers, which means any of them may pick up documentation tasks!
Could be externally — open source contributions.
Also the rise of web API documents. There’s a lot more to document.
None of these groups want to buy or learn specialist software. Furthermore DocBook, DITA and LaTeX are complicated.


Docs Like Code
Docs Like Code. Anne Gentle. https://www.docslikecode.com/
Using the same processes and tools for documentation as you do for software, whether that’s writing, reviewing, or version control.
It is possible to use Docs Like Code with traditional markup languages, but it’s difficult: e.g. diffing an XML file. Demonstrate. It’s also possible to use Docs Like Code with RoboHelp or Flare, but it’s difficult for the same reasons. (They use XHTML file format.) Almost impossible to use Docs Like Code with a binary file format, e.g. Word.
Writing and Publication
The big difference between markup languages and specialist authoring applications is the specialist authoring application takes care of both writing and publication. So you use Flare to write your Flare help topics, then use the same application to generate your online help or your PDF.


With a markup language, traditional or lightweight, you have to use one tool (an editor) to write the markup and another tool (usually command line) to turn the markup into the target format.
Editors
It is perfectly possible to use a text editor or IDE to write markup.Vim, EMACS, Sublime Text, Atom, Visual Studio Code; whatever is your favourite.


But because of the tag heaviness, many people used a graphical editor, such as Oxygen, to edit traditional markup. This is less necessary with lightweight markup; I would guess most people just use a text editor or IDE.
Validation (Aside)
With traditional markup you definitely need some kind of validation tool: either built into your IDE, or as a separate tool. Otherwise, builds would often fail because you got the markup wrong.


With lightweight markup languages, validation is less necessary: they’re very lax. You can get the markup wrong, but your publication tool will generally churn out something, even if it’s not what you intended.
Publication Tools
For DocBook there were the DocBook XSL stylesheets; for DITA, the DITA Open Toolkit.


Lightweight markup languages are no different. There are many, many tools available for publication, which can be bewildering. These range from simple tools to convert a file into a different format, e.g. PDF, to static site generators that create an entire web help site.


reStructuredText: Sphynx
Markdown: Kramdown, PanDoc, Jekyll
AsciiDoc: AsciiDoctor, Antora


The Docs Like Code website has a good introduction to some of these. Also Write the Docs North!


One advantage of lightweight markup languages is that they’re supported within platforms like GitHub, blogging platforms, wiki platforms.
Practice
Overview of what a lightweight markup language looks like


Can see it’s easier to read and write. (More “humane”).
Problems and Caveats
Are lightweight markup languages easier to write? I would say not. Footnote in XML: it’s going to be something like <footnote>. In AsciiDoc? I have to look it up every time.
Can’t get away from the fact that they are less capable than XML based markup languages; deliberately so.


Not WYSIWYG. Need two windows open! Reveal codes...


Plugins for browsers and text editors to preview Markdown and AsciiDoc.
Or use a service which watches your source files for changes and rebuilds the output automatically.